<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线性回归解析与实例</title>
      <link href="/2023/04/15/xian-xing-hui-gui-jie-xi-yu-shi-li/"/>
      <url>/2023/04/15/xian-xing-hui-gui-jie-xi-yu-shi-li/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>本例主要讲述通过梯度下降算法求单变量线性回归模型的参数问题。损失函数是通过最小二乘法进行计算。</p><h3 id="程序运行步骤"><a href="#程序运行步骤" class="headerlink" title="程序运行步骤"></a>程序运行步骤</h3><ul><li>读取数据集</li><li>z-score 标准化</li><li>通过梯度下降算法更新参数</li><li>参数更新之后继续迭代</li><li>在第三步和第四步之间进行循环</li></ul><h3 id="数学公式推导"><a href="#数学公式推导" class="headerlink" title="数学公式推导"></a>数学公式推导</h3><p>最小二乘法：<br>$$<br>J(\theta_0, \theta_1)&#x3D;(1&#x2F;2m)\sum_{i&#x3D;1}^m(h(x^i)-y^i)^2<br>$$</p><blockquote><p>解释：样本的数量是m个，h(x)是预测值，y是真实值，通过求出两者的差，然后平方求和算出来的值就是这个 theta 下的损失值。</p></blockquote><p>梯度下降：<br>$$<br>\theta_j&#x3D;\theta_j-\alpha*\frac{\partial j(\theta_0,\theta_1)}{\partial \theta_j}<br>$$</p><blockquote><p>j&#x3D;1,2;alpha 是学习率，可以设置为0.01或者0.001，学习率越小学习迭代的次数就越多，越大迭代的次数越少，但是可能错过损失函数的最小值。偏导数代表的是一个方向，我们沿着这个方向进行梯度下降。</p></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>以下代码通过 Python 实现：</p><ol><li>LinearReg 类的实现</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">class</span> <span class="token class-name">LinearReg</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> feature<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>feature <span class="token operator">=</span> feature        self<span class="token punctuation">.</span>label <span class="token operator">=</span> label        self<span class="token punctuation">.</span>theta <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 将theta的初始值设置为0</span>    <span class="token keyword">def</span> <span class="token function">gradient_decent</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>gradient_step<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 执行迭代函数</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">gradient_step</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        learn_rate <span class="token operator">=</span> <span class="token number">0.01</span>  <span class="token comment" spellcheck="true"># 学习率设置为0.01</span>        group_num <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>label<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取样本的数量</span>        feature <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>self<span class="token punctuation">.</span>feature<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将样本的特征转为矩阵</span>        theta <span class="token operator">=</span> self<span class="token punctuation">.</span>theta        label <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>self<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">.</span>T  <span class="token comment" spellcheck="true"># 将样本的特征转为矩阵，并进行转置，因为 lable是一个以为数组（1xn）</span>        <span class="token comment" spellcheck="true"># print(self.theta)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 迭代200次</span>            margin <span class="token operator">=</span> feature <span class="token operator">*</span> theta<span class="token punctuation">.</span>T <span class="token operator">-</span> label  <span class="token comment" spellcheck="true"># 真实值和估计值之间的差</span>            temp <span class="token operator">=</span> theta <span class="token operator">-</span> <span class="token punctuation">(</span>learn_rate <span class="token operator">/</span> group_num<span class="token punctuation">)</span> <span class="token operator">*</span> margin<span class="token punctuation">.</span>T <span class="token operator">*</span> feature  <span class="token comment" spellcheck="true"># 更新theta</span>            theta <span class="token operator">=</span> temp        self<span class="token punctuation">.</span>theta <span class="token operator">=</span> theta  <span class="token comment" spellcheck="true"># 将更新完的 theta 赋值给我们的初始化中的 theta</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'theta = &amp;#123;theta&amp;#125; step = &amp;#123;(learn_rate / group_num) * (margin.T * feature)&amp;#125;'</span><span class="token punctuation">)</span></code></pre><ol start="2"><li>main.py</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plb<span class="token keyword">from</span> linearRegression <span class="token keyword">import</span> LinearReg<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> preprocessing<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    scaler <span class="token operator">=</span> preprocessing<span class="token punctuation">.</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./data/advertising.csv'</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token string">'wechat'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values    y <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token string">'sales'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values    xx <span class="token operator">=</span> scaler<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 标准化操作</span>    yy <span class="token operator">=</span> scaler<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 标准化操作</span>    x_line <span class="token operator">=</span> xx<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span>    y_line <span class="token operator">=</span> <span class="token number">0.78</span> <span class="token operator">*</span> x_line <span class="token operator">+</span> <span class="token number">0.0</span>  <span class="token comment" spellcheck="true"># 最后得到的theta参数是0.78（斜率）和0.0（截距）</span>    xx_addrow <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    yy_reduce <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        xx_addrow<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">## 在特征的最前面添加一列 1，是为了寻找最佳的截距</span>        yy_reduce<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>yy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plb<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>xx<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> yy_reduce<span class="token punctuation">)</span>    plb<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_line<span class="token punctuation">,</span> y_line<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>    plb<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    linear_reg <span class="token operator">=</span> LinearReg<span class="token punctuation">(</span>xx_addrow<span class="token punctuation">,</span> yy_reduce<span class="token punctuation">)</span>    res <span class="token operator">=</span> linear_reg<span class="token punctuation">.</span>gradient_decent<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="3"><li>运行结果展示</li></ol><p><img src="/linerreg.png"></p><blockquote><p>如有不足，欢迎指正！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 线性回归 </tag>
            
            <tag> 梯度下降 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你不知道的JS中卷第一部分</title>
      <link href="/2023/01/11/ni-bu-zhi-dao-de-js-zhong-juan-di-yi-bu-fen/"/>
      <url>/2023/01/11/ni-bu-zhi-dao-de-js-zhong-juan-di-yi-bu-fen/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="你不知道的JS-中卷-第一部分"><a href="#你不知道的JS-中卷-第一部分" class="headerlink" title="你不知道的JS(中卷)第一部分"></a>你不知道的JS(中卷)第一部分</h4><p><strong>1.类型是什么，JS中有几种类型？</strong></p><p>在《你不知道的JS》中是这样定义类型的：对语言引擎和开发人员来说，类型是值的内部特征，它定义了值的行为，以区别于其他值。比如我们会对42和“42”进行不同的操作，一般情况下我们对前者进行的是数学上的四则运算，对后者进行的是字符串的操作。这就决定了这两个东西必须是不同的类型。</p><p>JS中共有六种类型：Undefined，Null，Boolean, Number，String，Object</p><p><strong>2.怎样理解函数和对象，数组和对象？</strong></p><p>函数是可以被调用的对象，函数对象的length属性是声明的形参的个数。数组的length属性是元素的个数。</p><p>示例代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//3</span></code></pre><p><strong>3.值和类型</strong></p><p>在JS中变量是没有类型的，只有值才有类型。typeof返回的是这个变量所持有的值的类型，而不是这个变量的类型，因为这个变量可以持有所有的类型。</p><p><strong>4.undefined和undeclared</strong></p><p>undefined是声明了但是没有定义，undeclared是根本就没有声明。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> aconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//ReferenceError: b is not defined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span></code></pre><blockquote><p>typeof一个未声明的变量是不会报错的，这样做有好处也有坏处，好处是这样更安全一下，坏处就是和我们一般情况下的理解不相符，容易用错。下面看一下我们是怎么利用这个好处的。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//这个data是否存在是视情况而定的</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'后端没有返回数据'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'后端返回数据了'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果我们按照原来的方式来写的话就是：</span><span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'后端没有返回数据'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'后端返回数据了'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这样写当后端没有返回data的时候，就会报错，让程序终止运行，这样的后果显然是我们不想看到的。</span></code></pre><p>5.数组和字符串</p><p>JS中的字符串是不可以改变的，数组是可以改变的，并且对字符串某个字符的访问用a[1]这种方式在之前的IE浏览器中是不被允许的，最好的方式是a.charAt(1)。字符串不可变是指字符串的成员函数不会改变其原始值，而是创建并返回一个新的字符串，数组是可变的是指，数组的成员函数都是在其原始值上进行操作。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//call 方法第一个参数也是作为函数上下文的对象，但是后面传入的是一个参数列表，而不是单个数组。</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'SIPC'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>join<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//S-I-P-C</span><span class="token keyword">var</span> res <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[ 's', 'i', 'p', 'c' ]</span></code></pre><blockquote><p>许多数组函数用来处理字符串都是很方便的，比如上面的例子。</p></blockquote><p>6.数字</p><p>JS中只有一种数值类型：number，没有整形和浮点型之分，所有的数字都是双精度的。默认情况下，数值都是以十进制的形式显示，特别大或者特别小的数值用指数格式显示。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5E10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//50000000000</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toExponential</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//5e+10</span></code></pre><p>由于数字值可以使用Number对象进行封装，所以数字值可以调用封装对象中的一些方法，代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5E10</span><span class="token comment" spellcheck="true">//显示小数点后几位</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//50000000000.00</span><span class="token comment" spellcheck="true">//显示的有效位是几位</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//5.00e+10</span></code></pre><p>JS中的进制：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0o123</span><span class="token comment" spellcheck="true">//八进制</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">0b101011</span><span class="token comment" spellcheck="true">//二进制</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre><p>7.在JS中0.1+0.2&#x3D;&#x3D;&#x3D;0.3吗？</p><p>不是的，js中的0.1并不是精确的0.1，而是一个很接近0.1的数，同理0.2也是，所以他们两个的和，也是一个很接近0.3的数，并不是0.3。那么怎样来判断0.1+0.2和0.3是否相等呢？这里我们引入一个名次，叫做“机器精度”Number.EPSILON。在机器精度这个误差允许的范围内相等，我们就认为是相等的</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token operator">+</span><span class="token number">0.2</span><span class="token operator">===</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token operator">-</span><span class="token number">0.1</span><span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>Number<span class="token punctuation">.</span>EPSILON<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span></code></pre><p>8.void 0 是什么？</p><p>我们可以通过void 0来获取undefined。当然是用void true也可以，或者void 1 ，undefined都是等效的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span></code></pre><p>9.NAN是什么，有什么特点。</p><p>NAN是number类型的一个值，这个值是数字运算出错之后的结果，他值得一提的地方是自身和自身并不相等。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">/</span><span class="token number">0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Infinity</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token operator">===</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true用来判断一个数是不是NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//-0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//false</span></code></pre><p>10.Date()和Error()</p><blockquote><p>Date()获取时间戳，当前时间，时间格式化。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//1609208370882 时间戳</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//1609208370891  时间戳</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Tue Dec 29 2020 10:19:30 GMT+0800 (GMT+08:00)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2020 12 29 10 30 26</span></code></pre><blockquote><p>Error()主要是为了获得当前运行栈的上下文。栈上下文信息包括函数调用找和产生错误代码的行号，以便于调试。错误对象通常与throw一起使用。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'这是一个错误'</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>11.强制类型转换</p><p>我们需要掌握字符串，数字，布尔值之间的类型转换的规则。</p><ol><li><p>ToString()和JSON.Stringify()</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//xxx</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//"xxx"</span><span class="token comment" spellcheck="true">//一下是不安全的JSON,在对象中会将其忽略，在数组中被设置为null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">fo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token function">fo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[1,null,null,null]</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"zhaohe"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>    sayHello<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    id<span class="token punctuation">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//&amp;#123;"name":"zhaohe"&amp;#125;</span><span class="token comment" spellcheck="true">//下面是JSON.Stringify()的两个有用的参数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//&amp;#123;"name":"zhaohe","age":19&amp;#125;数组中有什么就序列化什么</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!==</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> v    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//&amp;#123;"age":19,"Id":"20201101"&amp;#125;相当于过滤一下</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//缩进为3</span><span class="token comment" spellcheck="true">// &amp;#123;</span><span class="token comment" spellcheck="true">//     "name": "zhaohe",</span><span class="token comment" spellcheck="true">//     "age": 19,</span><span class="token comment" spellcheck="true">//     "Id": "20201101"</span><span class="token comment" spellcheck="true">//  &amp;#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"---"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//缩进用最后一个参数的代替</span><span class="token comment" spellcheck="true">// &amp;#123;</span><span class="token comment" spellcheck="true">// ---"name": "zhaohe",</span><span class="token comment" spellcheck="true">// ---"age": 19,</span><span class="token comment" spellcheck="true">// ---"Id": "20201101"</span><span class="token comment" spellcheck="true">// &amp;#125;</span></code></pre><blockquote><p>JSON.Stringify()和toString()的效果基本相同，只不过序列化的结果总是字符串。</p><p>将一个数字转为字符串可以通过数字+空串的方式，或者直接String(数字)，前者对于对象来说是调用的valueOf()，没有这个函数再调用toString()，后者是直接调用toString().</p></blockquote></li><li><p>ToNumber()</p><p>将一个对象类型的值，转成Number时，会先调用这个对象的valueOf()方法，如果没有就调用这个对象的toString()方法，如果还是没有就会报错(TypeError)或者返回NaN.</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'42'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//42</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token operator">+</span><span class="token string">"3.14"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//number</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//0</span><span class="token comment" spellcheck="true">//重写数组的toString()方法</span><span class="token keyword">var</span> c  <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>c<span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//42</span><span class="token comment" spellcheck="true">//Number()和parseInt()的区别</span><span class="token comment" spellcheck="true">//parseInt只针对字符串，传入true或者对象都不能处理</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"23xxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"23xxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//23</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//NaN</span></code></pre><blockquote><p>tips：true转换为1，undefined转换为NaN，null转换为0</p><p>将一个纯数字字符串转为数字可以通过字符串-0，来达到目的，或者字符串*1，都是一个道理。</p></blockquote></li><li><p>ToBoolean()</p><p>JS中的值可以分为一下两类：</p><p>1.可以被强制类型转换为false（有false，空串，0，undefined，NaN，null）</p><p>2.其他（被强制类型转换成false的值）</p><p>假值对象是什么？</p><p>假值对象不是封装了假值的对象，而是值一个对象转为boolean后为false，这样的对象有且仅有一个就是document,all这是由DOM提供的方法，并不是JS引擎提供的。</p><p>转换示例如下:</p><pre class=" language-JS"><code class="language-JS">var arr = []console.log(Boolean(arr))//trueconsole.log(Boolean(''))//falseconsole.log(Boolean(null))//falseconsole.log(Boolean(undefined))//falseconsole.log(Boolean(NaN))//falseconsole.log(Boolean(false))//falseconsole.log(Boolean(0))//falseconsole.log(Boolean(document.all()))//false 必须在浏览器环境下运行//我们常用的类型转换方式是!!console.log(typeof !!"")//boolean falseconsole.log(typeof !![])//boolean true</code></pre><blockquote><p>我们在if()的中括号中写条件的时候，如果用到不是boolean的情况，建议用！！显示转为boolean这样可以提高代码的可读性，而不应该依赖于隐试类型转换。</p></blockquote></li></ol><p>12.~运算符及应用</p><p>~x &#x3D; -(x+1)</p><p>~是对一个数所有位取反，包括符号位，等到的数再取补码。</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//-43</span></code></pre><p>应用：一些函数如：indexOf()在查找失败的时候返回-1，这时候我们通过~运算符就可以将-1转为0，也就是用一个假值0代表失败的情况，其他的情况都是成功。示例代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'hello'</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">~</span>a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fail'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">'ol'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//fail</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">'lo'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//success 3</span></code></pre><p>13.逻辑运算符&amp;&amp;和||</p><p>这两个逻辑运算其实更适合叫做“选择器运算符”，因为他们的返回值不是布尔类型的，而是左右操作数中的一个！这是不同于C语言的。</p><blockquote><p>&amp;&amp;的优先级高于||，||的优先级高于三目运算符</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">var</span> d <span class="token operator">=</span> undefinedconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">||</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//42</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">&amp;&amp;</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//abc</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token operator">||</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//abc</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token operator">&amp;&amp;</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token operator">||</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span><span class="token comment" spellcheck="true">//所以我们在把这种表达式当成条件的时候，可能和我们原来理解的不一样</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">||</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将42隐试类型转换为true</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">||</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将undefined隐试类型转化为false</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"456"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>我们可以这样理解：这两个操作符返回的结果是“能够判断这个表达式真假的时候的那个值”，这句话可能有点绕，我们解释一下：||是一真则真，有一个是真的，这个表达式就已经有结果了，&amp;&amp;同类一假则假。console.log(a||b)当第一个数a为真的时候，这个表达式已经可以判断真假了，所以到此结束，返回a。console.log(a&amp;&amp;b)当第一个数为真的时候，并不能判断真假，还要看第二个数，当我们看到第二个数的时候，已经可以判断真假了，到此结束，返回第二个数。其他同理！</p></blockquote><p>14.宽松相等和严格相等</p><p>宽松相等和严格相等我们一般理解他们的区别是：&#x3D;&#x3D;检查值是否相等，&#x3D;&#x3D;&#x3D;检查值和类型是否相等。而正确的解释是：&#x3D;&#x3D;允许强制强制类型转化，而&#x3D;&#x3D;&#x3D;不允许强制类型转换。</p><p>不同的基本类型之间比较的话，都会把基本类型转为number类型再比较，示例代码如下：</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'42'</span><span class="token operator">==</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//解析:‘42’转为数字类型是42,42和42相等</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'42'</span><span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//false</span><span class="token comment" spellcheck="true">//解析:‘42’转为数字类型是42，true转为数字类型是1,42和1不相等</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'42'</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//false</span><span class="token comment" spellcheck="true">//解析:‘42’转为数字类型是42，false转为数字类型是0,42和0不相等</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//false</span><span class="token comment" spellcheck="true">//解析: true转为数字类型是1,42和1不相等</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//false</span><span class="token comment" spellcheck="true">//解析: false转为数字类型是0,，42和0不相等</span><span class="token comment" spellcheck="true">//以下是undefined和null的比较，undefined和null是相等的，和除了他们两个之外的值是不等的。就是说在==运算符中这两个是一类。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>undefined <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>undefined <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>undefined <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>undefined <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//false</span></code></pre><p>15.逗号操作符</p><p>对它的每个操作数求值，并返回最后一个操作数的值；</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//4</span></code></pre><blockquote><p>应用：</p><p>1.一般在for循环中使用，比如一个循环要设置多个变量的增减情况</p><p>2.在返回值里面使用，比如要返回一个值之前需要对这个值进行加一操作</p><p>return(x++,x)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你不知道的JS中卷第二部分</title>
      <link href="/2023/01/10/ni-bu-zhi-dao-de-js-zhong-juan-di-er-bu-fen/"/>
      <url>/2023/01/10/ni-bu-zhi-dao-de-js-zhong-juan-di-er-bu-fen/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="异步和性能"><a href="#异步和性能" class="headerlink" title="异步和性能"></a>异步和性能</h3><h4 id="1-异步：现在与将来"><a href="#1-异步：现在与将来" class="headerlink" title="1.异步：现在与将来"></a>1.异步：现在与将来</h4><p><strong>1.1什么是异步运行？</strong></p><p>程序中将来执行的部分并不一定在现在运行的代码之后就立即执行，换句话说，现在无法完成的任务将会异步完成。因此并不会出现人们本能的认为会出现或者希望出现的阻塞情况。</p><p>任何时候，只要把一段代码包装成一个函数，并制定它在相应某个事件（定时器，鼠标点击，ajax相应等）时执行，你就是在代码中创建了一个将来执行的块。也由此在程序中引入了异步机制。</p><p><strong>1.2什么是时间循环</strong></p><p>所有的JS的运行环境都有一个共同的特点，即他们都提供一种机制来处理程序中多个块的执行，且执行每个块时调用JS引擎，这种机制被称为时间循环。如果在队列中有等待的时间，那么就会从队列中摘下一个事件并执行。这些事件就是你的回调函数。定时器的第二个参数设置一个毫秒值的意思是在这个毫秒只之后将这个回调函数放在事件循环队列中，如果队列中本来就有等待的任务，那么这个刚刚放进去的回调函数并不会立即执行，而是必须要等待前面的任务执行完了之后再执行。</p><p><strong>1.3异步和并行是一回事吗？</strong></p><p>异步和并行常常被混为一谈，但是实际上他们的意义完全不同。记住，异步是关于现在和将来的时间间隙，而并行是关于能够同时发生的事情。并行计算最常见的工具就是进程和线程。进程和线程独立运行，并可能同时运行：在不用的处理器，但多个线程能够共享单个进程的内存。与之相对的是，事件循环是把自身的工作分成一个个任务并且顺序执行，不允许对共享内存的并行访问和修改。JS中的函数是具有运行完整性的，就是说这个函数没有执行完，就不能执行下一个函数或者别的语句。这在一定程度上避免了多线程带来的运行结果的不确定性。但是JS的运行结果也不是绝对确定的，因为有时候并不能确定哪个函数先执行。在JS中，这种函数顺序的不确定性就是通常所说的竞态条件。</p><p><strong>1.4你知道并行和并发的区别吗，你知道进程和线程的区别吗？</strong></p><p>并行和并发的区别在于“同时”，举个例子：当你吃饭的时候来了个电话，你停下了手中的筷子，拿起手机接电话这可以看成并发。当然，你也可以一般吃饭一边接电话，这就是并行。并发的关键是你有处理多个任务的能力，但是不一定同时执行，并行是你可以同时处理多个任务。并行和并发都是可以处理多个线程的，只不过是一个cpu处理多个线程我们叫并发，多个cpu处理多个线程我们叫并行。</p><p>通常需要将这些“并发”（有别于操作系统中的并发概念）执行的进程进行某种形式的交互协调，比如需要确保执行顺序或者需要放置竞态的出现。这些“进程”也可以把自己分成更小的块以便其他“进程”可以插进去。</p><p>进程和线程是包含关系，举个例子：一个工程的供电设备功率小，只能支持一个车间的工作，一个车间就是一个进程，这就代表一个cpu一个时刻只能处理一个进程。但是一个车间里面有好多工人，这些工人的都是为这个车间工作的，工人就代表线程，就是所一个进程里面可以有多个线程。同时一个车间的工人们活动的空间是相同的，就是说线程可以享用同一块内存。</p><h4 id="2-回调"><a href="#2-回调" class="headerlink" title="2.回调"></a>2.回调</h4><p>回调是编写和处理JS程序异步逻辑的最常用的方式，确实，回调是这门语言中最基础的异步形式。事件循环队列处理到这个项目的时候就会运行回调函数。换句话说，回调函数包裹或者说封装了程序的延续。</p><p> <strong>2.1回调的问题是什么？</strong></p><p> 虽然在执行层级上我们的大脑是以异步的方式运作的，但是我们的任务计划还是以顺序，同步的方式进行的：“我要先去商店，然后买点牛奶，然后去干洗店。“我们在思考的时候一般是按照顺序仔细的计划着，并且会假定有某一种形式的临时阻塞来保证B会等待A完成，C会等待B完成。开发者在写代码的时候也是在仔细计划着一系列动作的发生。我们的思考方式是一步一步的，但是从同步转换到异步之后，可用的工具（回调）却不是按照一步一步的方式来表达的。我们的顺序阻塞式的大脑计划行为无法很好地映射到面向回调的异步代码。这就是回调方式最主要的缺陷：对于他们在代码中表达异步的方式，我们的大脑需要努力才能同步得上。</p><p>还有一个问题就是信任问题，我们平时用的一些支持回调的函数，比如setTimeout，或者第三方的ajax，这些函数的具体实现都不是我们可见的，所以当我们把自己的回调函数交给这些函数的时候，我们能够保证我们的回调函数就会按照我们预期的结果来执行吗？这就是可信任问题，并不是所有的第三方库中的函数都是100%可信任的。我们把自己程序一部分的执行控制交给某个第三方库的情况叫做控制反转。回调最大的问题就是控制反转，它会导致信任连的完全断裂。</p><p><strong>2.2尝试挽救回调</strong></p><p>一种尝试挽救回调的方法是分离回调，就是将成功和失败的回调进行分离而不是在一个回调中进行判断。。但是这并没有涉及阻止或者过滤不想要的重复调用回调的问题。反而现在的情况更加糟糕了，因为现在你可能得到成功或者失败的结果，或者都没有，并且你还不得不编码处理这些问题。</p><blockquote><p>永远异步调用回调，即使就在事件循环的下一轮。</p></blockquote><h4 id="3-Promise"><a href="#3-Promise" class="headerlink" title="3.Promise"></a>3.Promise</h4><p>如果我们不把自己程序的continuation传给第三方，而是希望第三方给我们提供了解其任务何时结束的能力，然后由我们自己来决定下一步怎么做，这种范式就称为Promise。Promise决议后就是外部不可变的值，我们可以安全地把这个值传递给第三方，并且确信它不会被有意无意地修改。不可变性听起来似乎是一个学术话题，但实际上这是Promise设计中最基础和最重要的因素，我们不应该随意忽略这一点。</p><p>对一个Promise调用then的时候，即使这个Promise已经决议，提供给then()的回调也总是被异步调用。一个Promise决议后，这个Promise上所有的通过then()注册的回调都会在当前执行栈的最后执行，在事件循环队列的前面执行。如果你对一个Promise注册了一个完成回调和一个拒绝回调，那么Promise在决议的时总会调用其中的一个。又因为Promise只能被决议一次，所有then注册的回调最多被调用一次，所以then注册的回调只能被调用一次。</p><p>当我们需要给resolve或者reject传递多个值的时候，必须把多个值封装到一个对象或者数组中。因为除了第一个参数之后的参数都会被默默忽略。示例代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">,</span><span class="token string">'second'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>从Promise.resolve()得到的是一个真正的Promise，是一个可以信任的值。如果你传入的已经是一个真正的Promise，那么你得到的就是它本身，如果传入的是一个立即值，那么也会返回一个Proimse。示例代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">rej</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//rejected PromiseResult='123'</span>        <span class="token function">res</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//fullfilled PromiseResult='123'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'啦啦'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//fullfilled PromiseResult='啦啦'</span></code></pre><blockquote><p>注意：当我们传一个Promise的时候，resolve只是把这个Promise展开，这个Promise是完成那么依旧返回完成，如果是拒绝那么还是返回拒绝，而不是任何经过resolve的Promise都会变成完成。</p></blockquote><p>当我们使用Promise的时候，不管有多少个异步的步骤，每一个步骤都能根据需要等待下一个步骤，或者不等！下面的代码是依次异步读取三个文件,并把读取结果放在一个数组里面的示例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./1.txt'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">res</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./2.txt'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">res</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./3.txt'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">res</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'content: '</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> </code></pre><p>Promise的异步执行顺序：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'E'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>Promise只能被决议一次，后面的决议会自动忽略掉，示例代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    then<span class="token punctuation">:</span> <span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">rej</span><span class="token punctuation">(</span><span class="token string">'oops'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//不会执行到这里</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fail'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>Promise.all([])和Promise.race([])一个是门，都完成了才会返回Promise，一个是竞态，只要有一个完成就返回结束了，然后返回完成的这个。all返回一个有所有传入的Promise的完成消息组成的数组，与指定的顺序一致。如果这些Promise中有任何一个被拒绝的话，all方法就会立刻返回拒绝，并丢弃所有来自其他Promise的全部结果。race也是有任何一个被拒绝就会拒绝。如果传的是一个空数组，就永远不会决议。all传入空数组会立即完成。</p><h4 id="4-生成器"><a href="#4-生成器" class="headerlink" title="4.生成器"></a>4.生成器</h4><p>现在我们把注意力转移到一种顺序、看似同步的异步流程控制表达风格。使这种风格成为可能的魔法是ES6的生成器。</p><p><strong>4.1打破完整运行</strong></p><p>在前面我们了解到，一个函数一旦开始执行，就会运行到结束，期间不会有其他代码能够打断它并插入其间。不过，ES6引入了一种新的函数类型，它并不符合这种运行到结束的特性，这类新的函数被称为生成器。</p><p>下面的一个小的demo可以帮助你理解一下生成器是怎么工作的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token operator">++</span>    <span class="token keyword">yield</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token operator">++</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//得到一个迭代器</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//开启foo函数的执行，当遇到yield的时候就会暂停</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这时候已经暂停了，调用bar函数</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//再次启动foo函数，这时会输出3</span></code></pre><p>yield会导致生成器在执行过程中发送一个值，这有点类似于中间return。这个next函数调用的结果是一个对象，他有一个value属性，持有从*foo()返回的值。我们在这里需要阐述一个重要的事实：即消息是双向传递的，yield作为一个表达式可以发出消息相应next()调用，next()也可以向暂停的yield表达式发送值。这就是说在生成器的执行过程中构成了一个双向消息传递系统，示例代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> y <span class="token operator">=</span> x<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token string">"hello"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">var</span> res <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//hello</span>res <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//42</span></code></pre><blockquote><p>next()函数的返回值，是从这个next开始到yield为止，生成器中函数的运行结果，如果yield指定了返回值，那么就是这个指定的值。然后next的参数的值，是赋给这个yield的。相当于next起到了一个承上启下的作用。</p></blockquote><p><strong>4.2生产器产生值</strong></p><p>for···of循环在每次迭代中自动调用next()，它不会向next()传入任何值。并且会在接受到done:true之后自动停止。这对于在一组数据上循环很方便。</p><p>Object内部没有迭代器，可以通过如下方式来遍历对象。数组，类数组，map，set都是有默认的迭代器的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">'zh'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">18</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方式一</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方式二</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>for···of循环遍历数组拿到的是数组的元素，for···in循环拿到的是数组的索引。</p></blockquote><p>4.2.1 iterable和迭代器。</p><p>iterable指一个包含可以在其值上迭代的迭代器的对象。从ES6开始，从一个iterable中提取迭代器的方法是：iterable必须支持一个函数，这个函数的名称是固定的，就是Symbol.iterable。调用这个函数时，它会返回一个迭代器。通常每次调用会返回一个全新的迭代器，虽然这一点并不是必须的。当一个对象中有一个next()方法的时候，这个对象就叫做一个迭代器。</p><p>4.2.2生成器和迭代器</p><p>可以把生成器看做一个值的生产者，我们通过迭代器接口的next()调用一个就获取一个值。严格来说，生成器本生并不是iterable，尽管非常类似–当你执行一个生成器时，就会得到一个迭代器。</p><p><strong>4.3异步迭代生成器</strong></p><p>一个用生成器来进行的异步操作。我们在生成器内部有完全同步的代码，但隐藏在背后的是，foo(···)内部的运行可以完全异步。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//这个函数封装一个异步的操作</span><span class="token keyword">function</span> <span class="token function">foor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">foor</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//yield关键字把生成器阻塞了</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'text:'</span><span class="token operator">+</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//29</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你不知道的JS上卷第一部分</title>
      <link href="/2023/01/09/ni-bu-zhi-dao-de-js-shang-juan-di-yi-bu-fen/"/>
      <url>/2023/01/09/ni-bu-zhi-dao-de-js-shang-juan-di-yi-bu-fen/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="你不知道的JS（上卷）第一部分-作用域和闭包"><a href="#你不知道的JS（上卷）第一部分-作用域和闭包" class="headerlink" title="你不知道的JS（上卷）第一部分 作用域和闭包"></a>你不知道的JS（上卷）第一部分 作用域和闭包</h4><p>1.变量赋值操作的剖析</p><p>变量的赋值操作会执行两个动作，首先编译器会在当前的作用域生成一个变量（如果之前没有声明过），然后运行时引擎会在该作用域中查找该变量，如果能找到就会对他进行赋值。</p><p>2.LHS和RHS</p><p>一道练习题帮你理解回顾LHS和RHS</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> a  <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>（其中LHS执行了三次！RHS执行了四次！）</p><p>3.什么时候出现ReferenceError和TypeError异常？</p><p>RHS在所有的嵌套作用域中都没有查找到所需的变量，引擎就会抛出一个ReferenceError异常。相较之下，当引擎执行RHS查询时，如果在嵌套作用域中没有找到所需的变量，就会在全局作用域中创建一个具有这个名字的变量，然后将这个变量返回给引擎，前提是程序运行在非严格模式下。严格模式下是禁止自动或者隐试的创建全局变量。严格模式下也会报错ReferenceError。当RHS成功查询但是对这个变量进行非正当的使用的时候（比如对一个非函数类型的值进行函数执行，应用一个null或者更undefined变量的属性方法）就会返回TypeError。ReferenceError和作用域的判别失败相关，TypeError则代表了作用域判别成功了，但是对结果的 操作是非法的或者不合理的。</p><p>4.词法作用域是什么？</p><p>词法作用域意味着作用域是由书写代码时的位置来决定的，无论函数在哪里被调用，或者它如何被调用，它的词法作用域都只由函数被声明时所处的位置决定。编译的词法分析阶段基本能知道全部的标识符在哪里以及是如何声明的，从而能预测在执行过程中如何对它们进行查找。JavaScript中有两个机制可以欺骗词法作用域：eval()和with。使用其中任何一个机制都会导致代码的运行速度变慢，不要使用它们。</p><p>5.如何解决全局作用域污染问题？</p><p>方法：在想要隐藏的代码片段外面加上一层函数的封装，这样封装的内容就只能在这个函数内部访问，这个函数内部也就有了自己的作用域，就算这个函数作用域中有和外部相同名称的变量，也是相互不回影响的，相当于与世隔绝。代码如下:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">function</span> foo <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span></code></pre><blockquote><p>但是这样做还是有瑕疵的，因为foo这个函数也在全局作用域中，而且也会在全局作用域中被调用，那么有没有更好的方式呢？答案是肯定的，进阶代码如下:</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> foo <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> b<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//传参</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//ReferenceError: foo is not defined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span></code></pre><blockquote><p>这里使用的是函数表达式的方式来解决的，函数表达式的好处就是让foo函数没有在全局作用域中出现，全局作用域中也不能调用foo这个函数。这样这个问题就完美解决了！</p></blockquote><p>6.块级作用域</p><p>一般情况下的JS是只有函数作用域而没有块级作用域的。比如</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>其实这个i我们只是想在for循环内部使用而不是在全局作用域中使用，但是我们这样写依然可以在全局作用域中使用i。解决这个问题的方法很简单，就是用let代替var，因为let是有块级作用域的！</p></blockquote><p>还有一种很少见到的情况就是try&#x2F;catch中的catch分句会创建一个块级作用域，其中声明的变量仅在catch内部有效。</p><p>7.什么是提升，为什么会有提升？</p><p>回忆一下，引擎会在执行JS代码之前首先对代码进行编译，编译阶段一部分工作就是找到所有的声明，明确这些声明的位置，并且把这些声明绑定到相关的作用域中。由此我们很容易发现，编译器比引擎先开始工作，所以在执行JS代码之前，所有的声明就已经都找到了，这样的结果就打破了平时认为JS代码是一行一行执行的观念，就出现了所谓的 “提升” 。</p><blockquote><p>概要：先有声明，后有赋值</p></blockquote><p>对比如下代码，有助于理解：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//代码片段1:</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">var</span> a<span class="token comment" spellcheck="true">//提升</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//输出2</span><span class="token comment" spellcheck="true">//代码片段2:</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//输出undefined</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">//声明可以提升 var a 是可以提升的，但是赋值不可以提升，a=2是不能提升的。</span></code></pre><p>变量有提升，函数声明也是有提升的，而且函数的声明的提升是高于变量的提升的！在此要注意函数表达式是不会有提升的。 </p><p>8.闭包是什么？</p><p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前的词法作用域之外执行。闭包使得函数可以继续访问定义时的词法作用域。如果函数在当前的词法作用域内执行的话，我们习惯上将它理解为RHS，其实这也是闭包。当函数在当前词法作用域之外执行的时候，我们就可以名正言顺的叫它闭包了！</p><p>下面是一个闭包的例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>  <span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">bar</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> bar <span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//妈妈快看,这就是闭包!</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>在foo函数内部，声明了一个baz函数，这个函数可以访问foo内部的作用域，然后将baz函数传递给bar函数，并且在bar函数内部调用了baz函数（也就是fn函数），此时baz函数的调用已经脱离了定义时的词法作用域，但是依旧是可以访问定义时词法作用域的变量a，这就是传说中的闭包！</p></blockquote><p><strong>闭包和循环–学了一年JS至今才明白的问题</strong></p><p>首先看这段代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果是5个5</span></code></pre><blockquote><p>延迟函数的回调会在循环结束的时候才执行。所以输出5个5是意料之中的结果。但是我们需要深入剖析一下这个问题，虽然每次迭代的时候都会定义一个函数，但是这5个函数都是使用了一个词法作用域，其实这五个函数中的i都是同一个i，这个i就是共享词法作用域（全局作用域）中的那个i。</p></blockquote><p>如果我们的需求是依次输出0到4，该怎么办？</p><p>代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> k <span class="token operator">=</span> i    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token operator">*</span>k<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//我们在for循环内部加了一层词法作用域，就是我们看到的IIFE，在IIFE中我们定义了一个变量，k，这个k可以存储每次迭代过程中，i的值，每一个迭代都会创建一个新的IIFE所以，一共有五个IIFE，互不干扰，这样的话，我们再次输出k的值，都会在各自的IIFE中查找，找到之后就不会再到最外层的那个全局作用域中找。</span></code></pre><p>这段代码还可以简化：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token operator">*</span>k<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或者</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>第一段代码比较好理解，第二段代码中let本身就可以形成块级作用域。至此，问题完美解决！</p></blockquote><p>9.闭包在模块中的应用</p><p>当通过返回一个含有属性引用的对象的方式来将函数传递到词法作用域外部时，我们就已经创造了可以观察和实践闭包的条件！</p><p>看一个模块的例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">CoolModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> something <span class="token operator">=</span> <span class="token string">'cool'</span>  <span class="token keyword">var</span> another <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>something<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> doAnother <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>another<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    doSomething<span class="token punctuation">:</span> doSomething<span class="token punctuation">,</span>    doAnother<span class="token punctuation">:</span> doAnother  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token function">CoolModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fn<span class="token punctuation">.</span><span class="token function">doAnother</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fn<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>CoolModule封装了两个变量和两个函数，并且这两个函数可以访问这两个变量，然后将这两个函数返回（暴露），这样在其他的作用域中也就可以访问CoolModule中的两个变量。</p></blockquote><p>如果要更简单的描述，模块模式需要具备两个必要的条件：</p><p>1.必须有外部的封闭函数，该函数必须至少被调用一次（每次调用都会创建一个新的模块实例）</p><p>2.封闭函数必须至少返回一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问且修改私有的状态。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你不知道的JS上卷第二部分</title>
      <link href="/2023/01/08/ni-bu-zhi-dao-de-js-shang-juan-di-er-bu-fen/"/>
      <url>/2023/01/08/ni-bu-zhi-dao-de-js-shang-juan-di-er-bu-fen/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="你不知道的JS-上卷-第二部分"><a href="#你不知道的JS-上卷-第二部分" class="headerlink" title="你不知道的JS(上卷)第二部分"></a>你不知道的JS(上卷)第二部分</h3><p><strong>1.this的作用是什么？</strong></p><p>this提供了一种更优雅的方式来隐试传递对象的引用，因此可以将API设计的更加简洁并且易于复用。随着你的使用模式越来越复杂，显式传递上下文会让代码变得越来越混乱，使用this就不会这样。</p><p><strong>2.错误的理解</strong></p><p>一般情况下，我们理解的this是指向这个函数自身的，但是这事一种错误的理解，其实this大多数的情况下不会指向函数自身，如果强制this指向函数自身可以使用call()或者apply()这样的方法，将自身函数传递进去。还有一种错误的理解，就是this是指向这个函数的词法作用域的。要明确是是this在任何情况下都不指向函数的词法作用域，因为作用域“对象”是无法通过JS代码来访问的，它存在于JS引擎内部。下面我们看看这样的一段代码，可以帮助我们理解JS：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo: "</span><span class="token operator">+</span>num<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">foo</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//0</span></code></pre><blockquote><p>这段代码的输出结果是0，为啥呢，难道不应该是4吗？下面我们就要解释一下，首先在foo函数内部有一个this.count ++这样的语句，但是这个this到底是谁呢？如果我们理解this是这个函数本身，那么我们就会认为输出结果为4。其实this是指向调用这个foo函数的对象的，谁调用了foo，this就指向谁。然后我们看到在for循环中有foo函数的调用，但是并没有显示是谁调用的，没有显示我们就理解为是window调用的，所以this是指向window的，但是我们输出的是foo.count这个count是foo的属性count(因为foo是函数，函数也是对象，对象就可以有属性)，所以还是初始化之后的值0，而不是4.</p></blockquote><p>然后看下面这段代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo: "</span><span class="token operator">+</span>num<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">foo</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>count<span class="token punctuation">,</span>count<span class="token punctuation">)</span></code></pre><blockquote><p>这段代码的输出结果是0,4第一个0前面已经解释过了，这个4是怎么回事呢？其实这个4，是window中的4，也就是在foo函数中递增的那个count的值。这个count是我们预期的结果！</p></blockquote><p>或者你还可以这样做，让this指向这个函数自身，那么这个foo函数的this的count自增就相当于给这个函数的count自增。代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo: "</span><span class="token operator">+</span>num<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>count<span class="token punctuation">)</span></code></pre><p><strong>3.this的绑定规则</strong></p><p>3.1默认绑定</p><p>即没有任何对象调用的时候，就可以理解为window在调用。</p><p>3.2隐式绑定</p><p>就是一个obj.foo()这样的形式，this是指向obj的。对象属性引用链中只由上一层或者说最后一层在调用位置中起作用。举例来说:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a<span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">,</span>    foo<span class="token punctuation">:</span>foo<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>    obj2<span class="token punctuation">:</span>obj2<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>obj1<span class="token punctuation">.</span>obj2<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//42</span></code></pre><p>另外还存在一个隐式丢失的问题，举例来说：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//此代码需要在浏览器中运行</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a<span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">,</span>    foo<span class="token punctuation">:</span>foo<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"oops global"</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//oops global</span></code></pre><blockquote><p>虽然bar是obj.foo的一个引用(栈中)，但是实际上，它引用的是foo函数本身(堆中)，因此此时的bar()其实是一个不带任何修饰的函数调用，因此应用了默认规则。</p></blockquote><p>3.3显示绑定</p><p>显示绑定是通过apply和call来实现的。对于上面绑定丢失的问题可以使用bind来处理，示例代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a<span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">,</span>    foo<span class="token punctuation">:</span>foo<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"oops global"</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//42</span></code></pre><blockquote><p>bind函数会返回一个硬编码的新函数，它会把你指定的参数设置为this的上下文。</p></blockquote><p>3.4new绑定</p><p>在讲解new绑定之前我们需要澄清一非常重要的关于JS的函数和对象的误解。在传统的面向对象语言中，构造函数是一种特殊的函数，在使用new初始化类时会调用类中的构造函数。JS也有一个构造函数，使用方法看起来一样，其实完全不同。JS的构造函数只是一些使用new操作符时被调用的函数。它不是属于某一个类，也不会实例化一个类，实际上它都不能说是一种特殊的函数，只是带上了new操作符的普通函数。使用new来调用函数的时候，会创建一个新的对象，这个新对象会被绑定到函数调用的this，如果函数没有返回其他对象，那么会自动返回这个新的对象。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> arg<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span></code></pre><p>当你把null或者undefined作为this的绑定对象传入call，apply或者bind，这些值在调用的时候会被忽略，实际应用的是默认绑定规则。</p><p><strong>4 绑定例外</strong></p><p>4.1被忽略的this</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//几个实用的小方法</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a: '</span><span class="token operator">+</span>a<span class="token punctuation">,</span><span class="token string">'b: '</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//a: 2 b: 4 apply解构数组</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//a: 7 b: 8 ES6解构赋值</span><span class="token keyword">var</span> bar <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//a: 2 b: 5 bind初始化参数</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>使用bind和apply来初始化参数的时候，其实我们并不关心函数里面this的指向，但是必须传入一个this，这时候传一个null是不错的选择。如果这个函数确实使用了this，那么传null，就会使this绑定到全局对象，这是不安全的。但是可以传入这个Ø来解决。示例代码如下：</p><p>console.log(Ø)</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Ø <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Ø<span class="token punctuation">)</span></code></pre><p><strong>5.深入理解对象</strong></p><p>基本类型并不是对象，null有时会被当做对象类型，但是这其实只是语言本身的一个bug，即对null执行typeof操作会返回object，但实际上null只是一个基本类型。数组和函数都是对象的一种子类型。</p><p>5.1内置对象</p><p>JS中还有一些对象子类型，通常被称为内置对象。有些内置对象的名字看起来和简单基础类型一样，不过实际上他们的关系更为复杂。有String,Number,Boolean,Array,Object,Function,Date,RegExp,Error。这些内置函数可以当做构造函数来使用，创建一个此种类型的对象。</p><p>5.2对象属性的访问</p><p>对象属性的访问有两种形式，一种是.操作符，一种是[]操作符。.操作符要求属性名必须满足标识符的命名规范，而[]操作符就没有这种限制。此外，由于[]操作符使用字符串来访问属性，所以可以在程序中构造这个字符串。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a<span class="token punctuation">:</span><span class="token number">123</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> idx <span class="token operator">=</span> <span class="token string">'a'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//123</span></code></pre><blockquote><p>属性名永远是字符串，如果使用其他基本类型的值作为属性名，这些值都会被转为字符串。示例代码如下：</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a<span class="token punctuation">:</span><span class="token number">123</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token boolean">true</span><span class="token punctuation">,</span>obj<span class="token punctuation">[</span><span class="token string">'true'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>obj<span class="token punctuation">[</span><span class="token number">520</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'I Love You'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'520'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>5.3属性描述符</p><p>在ES5之前JS语言本身并没有提供可以直接检测属性特征的方法，比如判断属性是否是只读。但是从ES5开始所有的属性都有了<strong>属性描述符</strong>。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a<span class="token punctuation">:</span><span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//&amp;#123; value: 2, writable: true, enumerable: true, configurable: true &amp;#125;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    writable<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否是只读类型</span>    enumerable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否可以枚举</span>    configurable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token comment" spellcheck="true">//是否可以再次调用defineProperty进行配置</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    enumerable<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//&amp;#123;&amp;#125;   enumerable设置为false之后a这个属性不再出现</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    enumerable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//&amp;#123; a: 2 &amp;#125;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    configurable<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    configurable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//TypeError: Cannot redefine property: a</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>了解了这些，我们就可以更加自由的控制自己的对象，比如为对象创建常量属性，或者禁止再次配置这个对象。</p></blockquote><p>5.4Getter和Setter</p><p>访问描述符：当你给一个属性定义getter和setter或者两者都有时，这个属性会被定义为‘访问描述符’。当我们调用obj.a的时候，其实是调用了obj对象的默认的[[Get]]操作。当设置一个属性的值的时候首先调用[[Set]]。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    _a_<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_a_    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token function">a</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_a_ <span class="token operator">=</span> val<span class="token operator">*</span><span class="token number">2</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>obj1<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">12</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//24</span></code></pre><p>5.5遍历</p><p>对于数组的遍历，使用for···in循环的时候遍历的是可枚举的属性，并不是属性的值。我们可以用forEach来遍历数组直接拿到数组的值，在ES6中新增了一种可以直接拿到数组属性值的方法，就是for···of。</p><p>示例代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-------'</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-------'</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>6.原型</strong></p><p>6.1Object.create()时什么？怎么将一个对象作为另一个对象的原型</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a<span class="token punctuation">:</span><span class="token number">10</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//&amp;#123;&amp;#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//10</span></code></pre><blockquote><p>这段代码将obj1当做了obj2的原型，虽然obj2是空的对象，但是访问a属性的时候，依旧可以沿着原型链在obj1中找到a。</p></blockquote><p>使用for···in循环遍历对象的原理和查找原型链类似，任何可以通过原型链访问到的属性都会被枚举。使用in操作符来检查属性时，同样会查找属性的整条原型链。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//虽然a不是obj2本身的属性，但是for···in遍历的时候依旧可以访问到a</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a<span class="token punctuation">:</span><span class="token number">10</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zhaohe'</span>obj2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>6.2原型的顶层是什么，为啥输出的时候是空的？</p><p>原型的顶层是Object.prototype,这是一个对象，但是不管我们是console.log还是for···in都会拿到一个空的结果，这是为什么呢，难道这个东西真的是空的吗？</p><p>答案是否定的，是因为Object.prototype里面的属性都是不可枚举的，所以我们无法通过遍历得到，但是下面的代码可以让你恍然大悟！</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> res <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//拿到所有的属性名</span><span class="token keyword">var</span> res2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token string">'valueOf'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//拿到valueOf这个属性的访问描述符</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token string">'valueOf'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    enumerable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//修改这个属性的可枚举类型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//可以枚举了</span></code></pre><p>6.3obj.a是怎么工作的？</p><p>当我们要拿到一个对象的属性并把这个属性输出的时候，大致的过程是怎样的呢？比如obj.a我们会调用[[Get]]在当前的对象中查找，如果找不多就在这个对象的原型链中查找，直到找到为止，如果最终也没有找到就返回undefined。当我们在使用obj.a &#x3D; 10的时候由发生了什么。首先在当前的对象中查找是否有这个变量a，如果有这个变量，而且这个变量有set，那么就调用这个变量的set，如果这个变量没有set，并且是writable的，就把等号右边的值，设置为这个属性的值。如果当前对象就没有这个变量a，我们就会沿着原型链查找，如果原型链中有一个属性为a，并且是writable的，就在obj中创建一个属性a，把它的值设为10，如果原型链中的属性是非writable的，那么这个obj.a &#x3D; 10赋值是无效的，也不会在obj中创建a。如果原型链中也没有一个名字为a的属性，如果有名字为a的set就调用这个set，也不会在obj中创建a，也不会修改这个set，如果原型链中没有set，就在obj中创建一个a，把它的值设为10。</p><p>6.4“类”函数</p><p>函数有一种特殊的特性：所有的函数默认都会有一个名为prototype的公有的不可枚举的属性，它会指向一个对象。这个对象就被称为此函数的原型。</p><p>“继承”以为着复制操作，JS并默认并不会复制对象属性。相反，JS会在两个函数之间创建一个关联。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Foo<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true  a并没有constructor，constructor只是Foo原型的属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Foo<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span></code></pre><blockquote><p>上面的代码new Foo()看起来像是C++中的构造函数，但是JS中没有所谓的构造函数，Foo()函数就是一个普通的函数，在这里只是通过new来调用了，注意这里是调用了Foo函数，然后返回一个对象，仅此而已。</p></blockquote><p>6.4JS中的继承是什么？</p><p>JS中的继承就是讲两个函数关联起来。不是C++中的继承。</p><p>6.5隐式原型和显示原型</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Fun<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>Fun<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Fun<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Fun<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token operator">===</span>Fun<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>Fun<span class="token punctuation">)</span><span class="token operator">===</span>Fun<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Fun<span class="token punctuation">.</span>__proto__<span class="token operator">===</span>Fun2<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Fun<span class="token punctuation">.</span>__proto__<span class="token operator">===</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span></code></pre><p><strong>7.行为委托</strong></p><p>JS中的原型链的这个机制本质就是对象之间的关联关系。为了更好地学习如何直观地使用原型，我们必须认识到它代表的是一种不同于类的设计模式。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/01/07/hello-world/"/>
      <url>/2021/01/07/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
